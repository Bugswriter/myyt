#!/usr/bin/env bash

if [[ -z "$1" ]]; then
	read -rp "Search query: " query
else
	query="$*"
fi

# If no query was passed, exit
[ -z "${query}" ] && exit 1

query="${query// /+}"
echo "$query"

ytb_jsondata=$(curl "https://www.youtube.com/results" -s \
	-G --data-urlencode "search_query=$query" \
	-G --data-urlencode "pbj=1" \
	-H "user-agent:Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0" \
	-H "accept-language:en-US, en;q=0.9" \
	-H "x-youtube-client-name:1" -H "x-youtube-client-version:2.20200214.04.00" \
	-H "accept-encoding:gzip" --compressed \
)

ytb_jsonvdata=$(printf "%s" "$ytb_jsondata" | jq ".[1].response" | jq '[ .contents|
	..|.videoRenderer? |
	select(. !=null) |
		{
			title: .title.runs[0].text,
			channel: .longBylineText.runs[0].text,
			duration:.lengthText.simpleText,
			views: .shortViewCountText.simpleText,
			date: .publishedTimeText.simpleText,
			videoID: .videoId,
		}
	]')

video_url=$(printf "%s" "$ytb_jsonvdata" | \
	jq -r '.[]| "[\(.channel)] -- \(.title) -- [\(.duration)] -- \(.date) -- youtu.be/\(.videoID)"' \
	| fzf --with-nth='1..-2' +m \
	| awk '{print $NF}' \
)

# If no video was chosen, exit
[ -z "${video_url}" ] && exit 1

mpv "https://$video_url"
